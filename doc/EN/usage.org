#+TITLE:
#+AUTHOR: Bob Mottram
#+EMAIL: bob@robotics.uk.to
#+KEYWORDS: freedombox, debian, beaglebone, hubzilla, email, web server, home server, internet, censorship, surveillance, social network, irc, jabber
#+DESCRIPTION: Turn the Beaglebone Black into a personal communications server
#+OPTIONS: ^:nil toc:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="solarized-light.css" />

#+BEGIN_CENTER
[[file:images/logo.png]]
#+END_CENTER

#+BEGIN_EXPORT html
<center>
<h1>Usage</h1>
</center>
#+END_EXPORT

| [[Readme]]                                               |
| [[Improving ssh security]]                               |
| [[Administrating the system via an onion address (Tor)]] |
| [[./usage_email.html][Using Email]]                      |
| [[Syncing to the Cloud]]                                 |
| [[Play Music]]                                           |
| [[Microblogging (GNU Social)]]                           |
| [[Social Network]]                                       |
| [[Chat Services]]                                        |
| [[RSS Reader]]                                           |
| [[Adding or removing users]]                             |

* Readme
After the system has installed a README file will be generated which contains passwords and some brief advice on using the installed systems. You can read this with the following commands:

#+BEGIN_SRC bash
ssh username@domainname -p 2222
emacs ~/README
#+END_SRC

You should transfer any passwords to a password manager such as [[http://www.keepassx.org/][KeepassX]] and then delete them from the README file. To save the file after removing passwords use *CTRL-x CTRL-s*.

To exit you can either just close the terminal or use *CTRL-x CTRL-c* followed by the *exit* command.
* Improving ssh security
To improve ssh security you can generate an ssh key pair on your system and then upload the public key to the Freedombone.

On your local machine:

#+BEGIN_SRC bash
ssh-keygen
#+END_SRC

For extra security you may also want to add a passphrase to the ssh private key. You can show the generated public key with:

#+BEGIN_SRC bash
cat ~/.ssh/id_rsa.pub
#+END_SRC

Log into your system and open the control panel.

#+BEGIN_SRC bash
ssh username@domain -p 2222
sudo control
#+END_SRC

Select /Manage Users/ then /Change user ssh public key/. Copy and paste the public key here, then exit.

It's a good idea to also copy the contents of *~/.ssh/id_rsa* and *~/.ssh/id_rsa.pub* to you password manager, together with the private key password if you created one.

There are advantages and disadvantages to using ssh keys for logins. The advantage is that this is much more secure than a memorised password, but the disadvantage is that you need to carry your ssh keys around and be able to install them on any computer of mobile device that you use. In high security or hostile infosec environments it may not be possible to carry or use USB thumb drives containing your keys and so memorised passwords may be the only available choice.

If you wish to only use ssh keys then log in to the Freedombone, become the root user and open the control panel with the 'control' command. Select /Security Settings/ then keep hitting enter until you reach the question about allowing password logins. Select "no" for that, then apply the settings. Any subsequent attempts to log in via a password will then be denied.

* Administrating the system via an onion address (Tor)
You can also access your system via the Tor system using an onion address. To find out what the onion address for ssh access is you can do the following:

#+BEGIN_SRC bash
ssh username@freedombone.local -p 2222
sudo control
#+END_SRC

Then select "About this system" and look for the onion address for ssh. You can then close the terminal and open another, then do the following:

#+BEGIN_SRC bash
sudo apt-get install tor connect-proxy
echo 'Host *.onion' >> ~/.ssh/config
echo 'ProxyCommand connect -R remote -5 -S 127.0.0.1:9050 %h %p' >> ~/.ssh/config
ssh username@address.onion -p 2222
#+END_SRC

Subsequently even if dynamic DNS isn't working you may still be able to administer your system. Using the onion address also gives you some degree of protection against corporate or government metadata analysis, since it becomes more difficult to passively detect which systems are communicating.
* Syncing to the Cloud
Owncloud provides an easy way to sync files across multiple systems (desktop, laptop and mobile), and is a good way to wean people off of the proprietary systems such as [[http://www.drop-dropbox.com/][Dropbox]]. It can also do many other things, such as acting as a jukebox or a collaborative document editing system. Owncloud servers can also [[https://www.youtube.com/watch?v=b1F-N3QXN2s][federate together]] to make it easy for independent installs to share files.

** Initial install
On first visiting your owncloud domain it will ask for an password, then select *Finish*. The password can be anything, but it's a good idea to follow the usual guidelines of using a random password generated by a password manager.

You may wish to add extra apps, such as calendar, music and document editing.
** On Android
Within F-droid search for *owncloud* and install the client. Also install *CalDAV Sync Adapter*.

Open the owncloud app and enter your owncloud domain name (including the https prefix) and login details for the user you created.

Open the calendar app (S planner) and under *settings* select *Calendars* then *Add account* then *CalDAV Sync Adapter*. Enter your owncloud username and password and the following URL:

#+BEGIN_SRC bash
https://myownclouddomain/remote.php/caldav/principals/myowncloudusername
#+END_SRC

You will also be prompted to enter login details. Your Android and Owncloud calendars should now be synchronised.
** On Linux
It's best to use an [[https://owncloud.com/products/desktop-clients/][officially supported client]] from the Owncloud site, rather than one which may be packaged by your distro. It's more lilkely that the official client will be up to date. [[https://software.opensuse.org/download/package?project=isv:ownCloud:desktop&package=owncloud-client][Packages are available]] for Debian and other distros.

Once the client is installed then open it and log in. After sychronisation you can then drag and drop files into *ownCloud* in your home directory.
* Play Music
** With the DLNA service
An easy way to play music on any mobile device in your home is to use the DLNA service. Copy your music into a directory called "/Music/" on a USB thumb drive and then insert it into from socket on the Beaglebone.

ssh into the system with:

#+BEGIN_SRC bash
ssh myusername@mydomain.com -p 2222
#+END_SRC

Then mount the USB drive with:

#+BEGIN_SRC bash
su
attach-music
#+END_SRC

The system will scan the Music directory, which could take a while if there are thousands of files, but you don't need to do anything further with the Beaglebone other than perhaps to log out by typing *exit* a couple of times.

If you have an Android device then go to F-Droid (if you don't already have it installed then it can be [[https://f-droid.org/][downloaded here]]) and search for *ControlDLNA*. On running the app you should see a red Debian icon which you can press on, then you may need to select "local". After a few seconds the list of albums or tracks should then appear and you can browse and play them.

The DLNA service will only work within your local home network, and isn't remotely accessible from other locations via the internet. That can be both a good and a bad thing. Another consideration is that there are no access controls on DLNA services, so any music or videos on the USB drive will be playable by anyone within your home network. If you need to restrict access to certain files then it may be better to use the music player within Owncloud.

** With Owncloud
The main advantage of playing music via Owncloud is that you can do that from anywhere - not only within your home network.

By default a music player is installed into Owncloud, so all you need to do is to visit your Owncloud web site, select the *music* directory and then upload some music files. Afterwards you can select the *music icon* from the top left drop down menu and albums will then appear which can be played. If you want to share music with other users then you can select the *share* option from within the files view to make the tracks available.

* Microblogging (GNU Social)
** Initial configuration
To log into your GNU Social site first obtain your username and password from the "microblogging" section of the readme file.

#+BEGIN_SRC bash
ssh username@domainname -p 2222
cat README
exit
#+END_SRC

Navigate to your site and log in. You may then want to select *Admin* and check or change the details. You may also wish to change the license for the site to be either Creative Commons or private.
* Social Network
** Domains
Both Hubzilla and GNU Social try to obtain certificates automatically at the time of installation via Let's Encrypt. This will likely mean that in order for this to work you'll need to have obtained at least one "official" domain via a domain selling service, since Let's Encrypt mostly doesn't seem to work with free subdomains from sites such as freeDNS.
** Initial install
On first visiting your Hubzilla site you'll see the login screen. The first thing you need to do is *register* a new user. The first user on the system then becomes its administrator.
* Chat Services
** IRC
IRC is useful for multi-user chat. The classic use case is for software development where many engineers might need to coordinate their activities, but it's also useful for meetings, parties and general socialising.
*** Irssi
The easiest way to use irssi is to connect to your system, like this:

#+BEGIN_SRC bash
ssh myusername@mydomain -p 2222
#+END_SRC

Then select *IRC* from the menu. Irssi is automatically set up to connect to your server and route its messages through the Tor network. Some popular systems such as *Freenode* reject connections coming from Tor (as a very crude attempt to stop trolls) and so if you want to use those you can exit to the command line from the menu and then just type "irssi" to use the system without Tor.
*** XChat
If you are using the XChat client:

Within the network list click, *Add* and enter your domain name then click *Edit*.

Select the entry within the servers box, then enter *mydomainname/6697* and press *Enter*.

Uncheck *use global user information*.

Enter first and second nicknames and check *auto connect to this network on startup*.

Check *use SSL* and *accept invalid SSL certificate*.

Enter *#freedombone* as the channel name.

Click *close* and then *connect*.

** XMPP/Jabber
*** Using with Profanity
The [[http://profanity.im][Profanity]] shell based user interface and is perhaps the simplest way to use XMPP from a laptop.

#+BEGIN_SRC bash
ssh username@domain -p 2222
#+END_SRC

Then select XMPP. Generate an [[https://en.wikipedia.org/wiki/Off-the-Record_Messaging][OTR]] key with:

#+BEGIN_SRC bash
/otr gen
#+END_SRC

Then to start a conversation using OTR:

#+BEGIN_SRC bash
/otr start otherusername@otheruserdomain
#+END_SRC

or if you're already in an insecure chat with someone just use:

#+BEGIN_SRC bash
/otr start
#+END_SRC

Set a security question and answer:

#+BEGIN_SRC bash
/otr question "What is the name of your best friends rabbit?" fiffi
#+END_SRC

On the other side the user can enter:

#+BEGIN_SRC bash
/otr answer fiffi
#+END_SRC

For the most paranoid you can also obtain your fingerprint:

#+BEGIN_SRC bash
/otr myfp
#+END_SRC

and quote that.  If they quote theirs back you can check it with:

#+BEGIN_SRC bash
/otr theirfp
#+END_SRC

If the fingerprints match then you can be pretty confident that unless you have been socially engineered via the question and answer you probably are talking to who you think you are, and that it will be difficult for mass surveillance systems to know the content of the conversation. For more details see [[http://www.profanity.im/otr.html][this guide]].

 When accessed via the user control panel the client is automatically routed through Tor and so if you are also using OTR then this provides protection for both message content and metadata.
*** Using with Jitsi
Jitsi is the recommended communications client for desktop or laptop systems, since it includes the /off the record/ (OTR) feature which provides some additional security beyond the usual SSL certificates.

Jitsi can be downloaded from https://jitsi.org

On your desktop/laptop open Jitsi and select *Options* from the *Tools* menu.

Click *Add* to add a new user, then enter the Jabber ID which you previously specified with /prosodyctl/ when setting up the XMPP server. Close and then you should notice that your status is "Online" (or if not then you should be able to set it to online).

From the *File* menu you can add contacts, then select the chat icon to begin a chat.  Click on the lock icon on the right hand side and this will initiate an authentication procedure in which you can specify a question and answer to verify the identity of the person you're communicating with.  Once authentication is complete then you'll be chating using OTR, which provides an additional layer of security.

When opening Jitsi initially you will get a certificate warning for your domain name (assuming that you're using a self-signed certificate). If this happens then select *View Certificate* and enable the checkbox to trust the certificate, then select *Continue Anyway*.  Once you've done this then the certificate warning will not appear again unless you reinstall Jitsi or use a different computer.

You can also [[https://www.youtube.com/watch?v=vgx7VSrDGjk][see this video]] as an example of using OTR.
*** Using with Ubuntu
The default XMPP client in Ubuntu is Empathy.  Using Empathy isn't as secure as using Jitsi, since it doesn't include the /off the record/ feature, but since it's the default it's what many users will have easy access to.

Open *System Settings* and select *Online Accounts*, *Add account*  and then *Jabber*.

Enter your username (username@domainname) and password.

Click on *Advanced* and make sure that *Encryption required* and *Ignore SSL certificate errors* are checked.  Ignoring the certificate errors will allow you to use the self-signed certificate created earlier.  Then click *Done* and set your Jabber account and Empathy to *On*.
*** Using Tor Messenger
Tor Messenger is a messaging client which supports XMPP, and its onion routing enables you to protect the metadata of chat interactions to some extent by making it difficult for an adversary to know which server is talking to which. You can download Tor Messenger from [[https://torproject.org][torproject.org]] and the setup is pretty simple.
*** Using with Android
Install [[https://f-droid.org/][F-Droid]]

Search for and install *Orbot* and *Conversations*.

Add an account and enter your Jabber/XMPP ID and password.

From the menu select *Settings* then *Expert Settings*. Select *Connect via Tor* and depending on your situation you might also want to select *Don't save encrypted messages*.

From the menu select *Manage accounts* and add a new account.

#+BEGIN_SRC bash
Jabber ID: myusername@mydomain
Password:  your XMPP password
Hostname:  mydomain
Port:      5222
#+END_SRC

Then select *Next*. When chatting you can use the lock icon to encrypt your conversation. It's also going through Tor, so passive surveillance of the metadata should not be easy for an adversary.
** Tox
Tox is an encrypted peer-to-peer messaging system and so should work without Freedombone. It uses a system of nodes which act as a sort of directory service allowing users to find and connect to each other. The Tox node ID on the Freedombone can be found within the README within your home directory. If you have other users connect to your node then you will be able to continue chatting even when no other nodes are available.
*** Using the Toxic client
Log into your system with:

#+BEGIN_SRC bash
ssh myusername@mydomain -p 2222
#+END_SRC

Then from the menu select *Tox Chat*. Tox is encrypted by default and also router through Tor, so it should be reasonably secure both in terms of message content and metadata.
** VoIP (Voice chat)
*** Using with Ubuntu
Within the software center search for "mumble" and install the client then run it. Skip through the audio setup wizard.

Click on "add new" to add a new server and enter the default domain name for the Freedombone, your username (which can be anything) and the VoIP server password which can be found in the README file on the Freedombone. Accept the self-signed SSL certificate. You are now ready to chat.

/Note: if you don't know the default domain name and you did a full installation then it will be the same as the wiki domain name./
*** Using with Android
Install [[https://f-droid.org/][F-Droid]]

Search for and install Plumble.

Press the plus button to add a Mumble server.

Enter a label (which can be any name you choose for the server), the default domain name of the Freedombone, your username (which can also be anything) and the VoIP server password which can be found in the README file on the Freedombone.

Selecting the server by pressing on it then connects you to the server so that you can chat with other connected users.

/Note: if you don't know the default domain name and you did a full installation then it will be the same as the wiki domain name./
** SIP phones
Freedombone also supports SIP phones The username and domain is the same as for your email address, and the SIP password and extension number will appear within the README file in your home directory. Various SIP client options are available, such as CSipSimple on Android and Jitsi on desktop or laptop machines. Ideally use clients which support ZRTP, which will provide the best level of security.

* RSS Reader
The way that RSS reading is set up on Freedombone gives you strong reading privacy. Not only is there onion routing between you and the server but also between the server and the source of the RSS feed. The only down side is that many RSS feeds are still http only, and so could be vulnerable to injection attacks, but it's expected that more of this will go to https in the foreseeable future due to a combination of growing recognition of security issues and systems like Let's Encrypt which make obtaining certificates much easier.

See the control panel for the RSS reader onion address.

#+BEGIN_SRC bash
ssh username@domainname -p 2222
sudo control
#+END_SRC

Then select the *About* screen.

The RSS reader is accessible only via an onion address. This provides a reasonable degree of reading privacy, making it difficult for passive adversaries such as governments or corporations to create lists of sites which you are subscribed to.

To set up the system open http://rss_reader_onion_address/ and log in with username *admin* and the password obtained either at the beginning of the install or from the README file in your home directory. You can then select the *Actions* menu and begin adding your feeds.

To access the RSS reader from a mobile device you can install a Tor compatible browser such as [[https://f-droid.org/wiki/page/info.guardianproject.orfox][OrFox]]. It will try to automatically change to the mobile version of the user interface, but if that doesn't work then navigate to http://rss_reader_onion_address/mobile. Remember to add the site to the NoScript whitelist, and you may also need to turn HTTPS Everywhere off.
* Adding or removing users
Log into the system with:

#+BEGIN_SRC bash
ssh username@domainname -p 2222
#+END_SRC

Select *Administrator controls* then *User Management*. Depending upon the type of installation after selecting administrator controls you might need to enter:

#+BEGIN_SRC bash
sudo su
control
#+END_SRC

#+BEGIN_EXPORT html
<center>
Return to the <a href="index.html">home page</a>
</center>
#+END_EXPORT
