#+TITLE:
#+AUTHOR: Bob Mottram
#+EMAIL: bob@robotics.uk.to
#+KEYWORDS: freedombox, debian, beaglebone, hubzilla, email, web server, home server, internet, censorship, surveillance, social network, irc, jabber
#+DESCRIPTION: Turn the Beaglebone Black into a personal communications server
#+OPTIONS: ^:nil toc:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="solarized-light.css" />

#+BEGIN_CENTER
[[file:images/logo.png]]
#+END_CENTER

#+BEGIN_EXPORT html
<center>
<h1>Usage</h1>
</center>
#+END_EXPORT

| [[Readme]]                                               |
| [[Improving ssh security]]                               |
| [[Administrating the system via an onion address (Tor)]] |
| [[./mobile.html][Mobile advice]]                                        |
| [[./usage_email.html][Using Email]]                                          |
| [[Syncing to the Cloud]]                                 |
| [[Play Music]]                                           |
| [[Microblogging (GNU Social)]]                           |
| [[Sharing things]]                                       |
| [[Social Network]]                                       |
| [[Chat Services]]                                        |
| [[RSS Reader]]                                           |
| [[Git Projects]]                                         |
| [[Adding or removing users]]                             |

* Readme
After the system has installed a README file will be generated which contains passwords and some brief advice on using the installed systems. You can read this with the following commands:

#+BEGIN_SRC bash
ssh username@domainname -p 2222
emacs ~/README
#+END_SRC

You should transfer any passwords to a password manager such as [[http://www.keepassx.org/][KeepassX]] and then delete them from the README file. To save the file after removing passwords use *CTRL-x CTRL-s*.

To exit you can either just close the terminal or use *CTRL-x CTRL-c* followed by the *exit* command.
* Improving ssh security
To improve ssh security you can generate an ssh key pair on your system and then upload the public key to the Freedombone.

On your local machine:

#+BEGIN_SRC bash
ssh-keygen
#+END_SRC

For extra security you may also want to add a passphrase to the ssh private key. You can show the generated public key with:

#+BEGIN_SRC bash
cat ~/.ssh/id_rsa.pub
#+END_SRC

Log into your system and open the control panel.

#+BEGIN_SRC bash
ssh username@domain -p 2222
#+END_SRC

Select /Administrator controls/ then /Manage Users/ then /Change user ssh public key/. Copy and paste the public key here, then exit.

It's a good idea to also copy the contents of *~/.ssh/id_rsa* and *~/.ssh/id_rsa.pub* to you password manager, together with the private key password if you created one.

There are advantages and disadvantages to using ssh keys for logins. The advantage is that this is much more secure than a memorised password, but the disadvantage is that you need to carry your ssh keys around and be able to install them on any computer of mobile device that you use. In high security or hostile infosec environments it may not be possible to carry or use USB thumb drives containing your keys and so memorised passwords may be the only available choice.

If you wish to only use ssh keys then log in to the Freedombone, become the root user and open the control panel with the 'control' command. Select /Security Settings/ then keep hitting enter until you reach the question about allowing password logins. Select "no" for that, then apply the settings. Any subsequent attempts to log in via a password will then be denied.

* Administrating the system via an onion address (Tor)
You can also access your system via the Tor system using an onion address. To find out what the onion address for ssh access is you can do the following:

#+BEGIN_SRC bash
ssh username@freedombone.local -p 2222
#+END_SRC

Select /Administrator controls/ then select "About this system" and look for the onion address for ssh. You can then close the terminal and open another, then do the following on your local system:

#+BEGIN_SRC bash
freedombone-client
#+END_SRC

This will set up your ssh environment to be able to handle onion addresses. In addition if you use monkeysphere then you can do:

#+BEGIN_SRC bash
freedombone-client --ms yes
#+END_SRC

Then you can test ssh with:

#+BEGIN_SRC bash
ssh username@address.onion -p 2222
#+END_SRC

Subsequently even if dynamic DNS isn't working you may still be able to administer your system. Using the onion address also gives you some degree of protection against corporate or government metadata analysis, since it becomes more difficult to passively detect which systems are communicating.
* Syncing to the Cloud
[[https://syncthing.net][Syncthing]] provides a similar capability to proprietary systems such as [[http://www.drop-dropbox.com/][Dropbox]], and also is well suited for use with low power single board computers. You can have one or more directories which are synchronized across your various laptops/desktops/devices, and this makes it hard for you to ever lose important files. The manner in which the synchronization is done is pretty secure, such that it would be difficult for passive adversaries (mass surveillance, "/men in the middle/", etc) to know what files you're sharing. Of course, you don't necessarily need to be running a server in order to use Syncthing, but if you do have a server which is always running then there's always at least one place to synchronize your files to or from.

Freedombone provides Syncthing shared directories for each user on the system, plus a single shared directory for all users. The expected most common scenario here is that of a family in which members may not want to share /all of their files/ with each other, but might want to share some in a common pool (eg. birthday photos). You can also easily share between different servers.

** On a laptop
Install syncthing:

#+BEGIN_SRC bash
curl -s https://syncthing.net/release-key.txt | sudo apt-key add -
echo "deb http://apt.syncthing.net/ syncthing release" | sudo tee /etc/apt/sources.list.d/syncthing.list
sudo apt-get update
sudo apt-get install syncthing
#+END_SRC

Add syncthing to your startup applications, so that it begins running when your system starts. Then either restart your system or run the command "syncthing" from a terminal.

In another terminal log into Freedombone:

#+BEGIN_SRC bash
ssh username@domainname -p 2222
#+END_SRC

Then select *File Synchronization*.

[[file:images/controlpanel/control_panel_file_sync.jpg]]

Select *Show device ID* and copy the long string of letters and numbers shown, using the shift key then select the text followed by right click then select copy.

Open a non-Tor browser and enter  *http://127.0.0.1:8384* as the URL. You should now see the minimalistic user interface. Under *Remote Devices* select *Add Remote Device*. In the *Device ID* field paste the string you just copied (CTRL+v). The Device name can be anything. Under *Share Folders with Device* check *default* (or whatever folder you created on your local machine), then save.

From the top menu select *Actions* and then *Show ID*, then copy the ID string (usually select then CTRL+c). Go back to the terminal control panel menu and select *Add an ID* then paste what you just copied (CTRL+v). Optionally you can also provide a description so that you later can know what that string corresponds to.

Now wait for a few minutes. Eventually you will see two messages appear within the browser asking if you want to add two new folders from the Freedombone server. Say yes to both, and specify *~/Sync* as the directory with your username and *~/SyncShared* as the shared directory. You can now copy files into your *~/Sync* directory and they will automatically be synced to the server. Those will be files which only you can access. If you copy files into *~/SyncShared* then they will also be available to any other users on the system.
** On Android
Install Syncthing and Connectbot from F-droid.

Set up Connectbot to log into Freedombone.

Select *File Synchronization*.

Select *Show device ID* and copy the long string of letters by pressing anywhere on the screen, selecting the *menu* then *copy* and then selecting the ID string. This is very tricky on a small screen, so expect to fail multiple times before you succeed in copying the text.

Open Syncthing and select the devices tab. Press on *+* and then paste the device ID with a long press followed by *Paste*. You may need to remove any stray characters which were copied during the previous haphazard selection process. Add a name, which can be anything.

Now select the menu (top left or menu button) and then press on *Device ID*. It will be copied to the clipboard. Go back to Connectbot and from the control panel select *File Synchronization* followed by *Add an ID*. You can then paste in the ID with a long press, and optionally add a description for the device. When that's done you can disconnect from Connectbot.

Now wait for a few minutes or more. Eventually you should receive two notifications (swipe down from the top to see them) which will allow you to confirm the connection to the server. Say yes to both, and specify appropriate directories for your files and the shared files. To reduce battery and data usage via the settings you can also set Syncthing to only sync while it's charging and only while it's connected to wifi.
* Play Music
** With the DLNA service
An easy way to play music on any mobile device in your home is to use the DLNA service. Copy your music into a directory called "/Music/" on a USB thumb drive and then insert it into from socket on the Beaglebone.

ssh into the system with:

#+BEGIN_SRC bash
ssh myusername@mydomain.com -p 2222
#+END_SRC

Then mount the USB drive with:

#+BEGIN_SRC bash
su
attach-music
#+END_SRC

The system will scan the Music directory, which could take a while if there are thousands of files, but you don't need to do anything further with the Beaglebone other than perhaps to log out by typing *exit* a couple of times.

If you have an Android device then go to F-Droid (if you don't already have it installed then it can be [[https://f-droid.org/][downloaded here]]) and search for *ControlDLNA*. On running the app you should see a red Debian icon which you can press on, then you may need to select "local". After a few seconds the list of albums or tracks should then appear and you can browse and play them.

The DLNA service will only work within your local home network, and isn't remotely accessible from other locations via the internet. That can be both a good and a bad thing. Another consideration is that there are no access controls on DLNA services, so any music or videos on the USB drive will be playable by anyone within your home network.

* Microblogging (GNU Social)
To log into your GNU Social site first obtain your username and password from the "microblogging" section of the readme file.

#+BEGIN_SRC bash
ssh username@domainname -p 2222
cat README
exit
#+END_SRC

Navigate to your site and log in. You may then want to select *Admin* and check or change the details. You may also wish to change the license for the site to be either Creative Commons or private.

GNU Social has a clutter-free mobile user interface which can be accessed via a Tor compatible browser (make sure to add a NoScript exception). Unlike similar proprietary sites there are no bribed posts.

[[file:images/gnusocial_mobile.jpg]]

* Sharing things
If you have the GNU Social microblogging system installed then it's also possible to share things or services between groups or with particular users. This can be useful for sharing items within a family, club or in a local sharing economy. Sharing things freely, without money, reveals the social basis at the root of all economics which money normally conceals or obscures.

Click on "/share/" or "/my catalog/" and this will switch to a screen which allows you to enter details for things to be shared or wanted.

[[file:images/sharings3.jpg]]

The "/catalog/" button then allows you to search for shared things within the federated network.

[[file:images/sharings4.jpg]]

* Social Network
** Domains
Both Hubzilla and GNU Social try to obtain certificates automatically at the time of installation via Let's Encrypt. This will likely mean that in order for this to work you'll need to have obtained at least one "official" domain via a domain selling service, since Let's Encrypt mostly doesn't seem to work with free subdomains from sites such as freeDNS.
** Initial install
On first visiting your Hubzilla site you'll see the login screen. The first thing you need to do is *register* a new user. The first user on the system then becomes its administrator.

[[file:images/hubzilla_mobile.jpg]]

* Chat Services
** IRC
IRC is useful for multi-user chat. The classic use case is for software development where many engineers might need to coordinate their activities, but it's also useful for meetings, parties and general socialising.
*** Irssi
The easiest way to use irssi is to connect to your system, like this:

#+BEGIN_SRC bash
ssh myusername@mydomain -p 2222
#+END_SRC

Then select *IRC* from the menu. However, other than via this method using ssh, irssi isn't a very good IRC client because it doesn't have the capability to onion route messages, and therefore leaks metadata. For the best security when using your IRC server, use HexChat, Emacs ERC or another client which supports socks5 proxying.
*** HexChat
HexChat (formerly XChat) is compatible with proxying via Tor and so provides the best security when connecting to your IRC server. It will allow you to connect to your IRC server's onion address.

First install HexChat and set up its configuration file.

#+BEGIN_SRC bash
sudo apt-get install tor hexchat
mkdir -p ~/.config/hexchat
echo "# By default, HexChat based IRC software, when started-up, or run for first time,
# it starts to use local network, to connect to the internet. To prevent that,
# and to force it, to use Tor proxy (a Socks5 server):
#
# /set net_proxy_host 127.0.0.1
# /set net_proxy_port 9050
# /set net_proxy_type 3
# /set net_proxy_use 0
net_proxy_host = 127.0.0.1
net_proxy_port = 9050
# Technical note: 3 = socks5
net_proxy_type = 3
# Technical note: Do not worry. 0 is not equal to "off". 0 stands for "All".
#                 Check yourself https://toxin.jottit.com/xchat_set_variables
net_proxy_use = 0

# HexChat should not use the same circuit/exit server as other Tor applications.
# Otherwise activity in different applications could be correlated to the same
# pseudonym. There is a way to prevent that.
# It is called stream isolation. We use IsolateSOCKSAuth, 
# see https://www.torproject.org/docs/tor-manual-dev.html.en
# The password is actually not required, but it does not hurt either.
# Will probable not hurt on Tor 0.2.2 and below.
# Works with Tor 0.2.3 and above.
#
# /set net_proxy_auth 1
# /set net_proxy_pass = HexChat
# /set net_proxy_user = HexChat
#
net_proxy_auth = 1
net_proxy_pass = HexChat
net_proxy_user = HexChat

# Get rid of protocol leaks:
# a DCC session can reveal IP address, etc. identd flag can reveal your
# username which you use to login in your OS(Windows/Linux/Unix/MacOS) profile.
# To prevent those:
#
# /set dcc_auto_chat 0
# /set dcc_auto_resume OFF
# /set dcc_auto_send 0
# /set irc_hide_version ON
# /set identd OFF <-- NOT working on all HexChat-based IRC software.
# But still highly suggested to include & use it.
# Probable not needed on UNIX, source: http://xchat.org/faq/#q21 
dcc_auto_chat = 0
dcc_auto_resume = 0
dcc_auto_send = 0
irc_hide_version = 1
identd = 0

# If you use your own comment instead of default values, then these data are
# posted on each channel when you do these events: JOIN, PART, QUIT, AWAY.
# So they can reveal who you actually are, when you are using same HexChat
# software for multiple different nicknames.
#
# Delete everything under Settings -> Preferences -> Default Messages:
# -> Quit: <Deleted everything!>
# -> Leave channel: <Deleted everything!>
# -> Away: <Deleted everything!>
away_reason = 
irc_part_reason = 
irc_quit_reason = 

# By default, HexChat based IRC software uses your platform OS(Operating System)s
# login user name as your nickname, user name, real name.  To prevent leaking
# that, and, to use your own choice of nickname, realname, username:
#
# ***Pseudonymous vs. anonymous IRC use.***
# Actually IRC is pseudonymous. Your nickname might also reveal something about
# your origin, interests, etc. You can make IRC more anonymous by choosing a more
# meaningless nickname. Use the following defaults if you want to be more anonymous.
# If user, user_ and user___ are already taken, add more _ or start using user1,
# user2, user3, etc. Or if the irc network auto assigns your a nickname, i.e.
# guest532, stick with that nickname.
#
# Of course, you are free to continue using IRC in a pseudonymous manner.
# In that case, instant of user, choose your nickname.
#
# /set irc_real_name user
# /set irc_user_name user
# /set irc_nick1 user
# /set irc_nick2 user_
# /set irc_nick3 user__
irc_real_name = user
irc_user_name = user
irc_nick1 = user
irc_nick2 = user_
irc_nick3 = user__

# Use a more common nick completion suffix:
# When you write the first few characters of a nickname followed by tab,
# it will, by HexChat default, complete the nickname and ", " behind the
# nickname. The behavior is HexChat specific. The " :" is more more common
# for more common clients such as mIRC.
#
# HexChat -> Settings -> Preferences -> input box -> completion_suffix set to :
#
completion_suffix = :

# Not starting the server windows at the beginning so you can check and set
# settings before connecting to any IRC networks.
gui_slist_skip = 1
" > ~/.config/hexchat/hexchat.conf
#+END_SRC

Now look up the onion address for your IRC server

#+BEGIN_SRC bash
ssh username@mydomainname -p 2222
#+END_SRC

Select Administrator options, then *About this system* and make a note of the onion address for IRC. Also select the *IRC Menu* and take a note of the login password.

[[file:images/hexchat_setup.jpg]]

Run HexChat.

Within the network list click, *Add* and enter your domain name then click *Edit*.

Select the entry within the servers box, then enter *ircaddress.onion/6697* and press *Enter*.

Uncheck *use global user information*.

Enter first and second nicknames and check *connect to this network on startup*.

Make sure that *use SSL* is unchecked. Encryption will be handled via the onion address itself.

Within the *Password* field enter the password which can be found from the IRC menu of the *control panel*.

Select the *Autojoin channels* tab, click *Add* and enter *#freedombone* as the channel name.

Click *close* and then *connect*.

*** Emacs
If you are an Emacs user then you can also connect to your IRC server via Emacs.

Ensure that tor is installed onto your local system:

#+BEGIN_SRC bash
sudo apt-get install tor
#+END_SRC

Add the following to your Emacs configuration file:

#+BEGIN_SRC elisp
(setq socks-noproxy '("localhost"))
(require 'socks)
(require 'tls)
(setq socks-server (list "Tor socks" "localhost" 9050 5))
(setq erc-server-connect-function 'socks-open-network-stream)
(setq erc-autojoin-channels-alist
    '(("myircaddress.onion" "#freedombone")))
(erc :server "myircaddress.onion" :port 6697 :nick "yourusername" :password "your IRC password")
#+END_SRC
*** Changing or removing the IRC password
By default the IRC server is set up to require a password for users to log in. The password is the same for all users. If you want to change or remove the password:

#+BEGIN_SRC bash
ssh myusername@mydomain -p 2222
#+END_SRC

Select /Administrator controls/ then *IRC Menu* and then change the password. An empty password will allow anyone to log in, so you can have a globally accessible IRC system if you wish, although you might want to carefully consider whether that's wise.

** XMPP/Jabber
*** Using with Profanity
The [[http://profanity.im][Profanity]] shell based user interface and is perhaps the simplest way to use XMPP from a laptop. It's also a good way to ensure that your OTR keys are the same even when logging in from different laptops or devices, and it also means that if those devices later become compomised then there are no locally stored OTR keys to be found.

#+BEGIN_SRC bash
ssh username@domain -p 2222
#+END_SRC

Then select XMPP. Generate an [[https://en.wikipedia.org/wiki/Off-the-Record_Messaging][OTR]] key with:

#+BEGIN_SRC bash
/otr gen
#+END_SRC

Then to start a conversation using OTR:

#+BEGIN_SRC bash
/otr start otherusername@otheruserdomain
#+END_SRC

or if you're already in an insecure chat with someone just use:

#+BEGIN_SRC bash
/otr start
#+END_SRC

Set a security question and answer:

#+BEGIN_SRC bash
/otr question "What is the name of your best friends rabbit?" fiffi
#+END_SRC

On the other side the user can enter:

#+BEGIN_SRC bash
/otr answer fiffi
#+END_SRC

For the most paranoid you can also obtain your fingerprint:

#+BEGIN_SRC bash
/otr myfp
#+END_SRC

and quote that.  If they quote theirs back you can check it with:

#+BEGIN_SRC bash
/otr theirfp
#+END_SRC

If the fingerprints match then you can be pretty confident that unless you have been socially engineered via the question and answer you probably are talking to who you think you are, and that it will be difficult for mass surveillance systems to know the content of the conversation. For more details see [[http://www.profanity.im/otr.html][this guide]].

 When accessed via the user control panel the client is automatically routed through Tor and so if you are also using OTR then this provides protection for both message content and metadata.
*** Using with Jitsi
Jitsi is the recommended communications client for desktop or laptop systems, since it includes the /off the record/ (OTR) feature which provides some additional security beyond the usual SSL certificates.

Jitsi can be downloaded from https://jitsi.org

On your desktop/laptop open Jitsi and select *Options* from the *Tools* menu.

Click *Add* to add a new user, then enter the Jabber ID which you previously specified with /prosodyctl/ when setting up the XMPP server. Close and then you should notice that your status is "Online" (or if not then you should be able to set it to online).

From the *File* menu you can add contacts, then select the chat icon to begin a chat.  Click on the lock icon on the right hand side and this will initiate an authentication procedure in which you can specify a question and answer to verify the identity of the person you're communicating with.  Once authentication is complete then you'll be chating using OTR, which provides an additional layer of security.

When opening Jitsi initially you will get a certificate warning for your domain name (assuming that you're using a self-signed certificate). If this happens then select *View Certificate* and enable the checkbox to trust the certificate, then select *Continue Anyway*.  Once you've done this then the certificate warning will not appear again unless you reinstall Jitsi or use a different computer.

You can also [[https://www.youtube.com/watch?v=vgx7VSrDGjk][see this video]] as an example of using OTR.
*** Using with Ubuntu
The default XMPP client in Ubuntu is Empathy.  Using Empathy isn't as secure as using Jitsi, since it doesn't include the /off the record/ feature, but since it's the default it's what many users will have easy access to.

Open *System Settings* and select *Online Accounts*, *Add account*  and then *Jabber*.

Enter your username (username@domainname) and password.

Click on *Advanced* and make sure that *Encryption required* and *Ignore SSL certificate errors* are checked.  Ignoring the certificate errors will allow you to use the self-signed certificate created earlier.  Then click *Done* and set your Jabber account and Empathy to *On*.
*** Using Tor Messenger
Tor Messenger is a messaging client which supports XMPP, and its onion routing enables you to protect the metadata of chat interactions to some extent by making it difficult for an adversary to know which server is talking to which. You can download Tor Messenger from [[https://torproject.org][torproject.org]] and the setup is pretty simple.
*** Using with Android
Install [[https://f-droid.org/][F-Droid]]

Search for and install *Orbot* and *Conversations*.

Add an account and enter your Jabber/XMPP ID and password.

From the menu select *Settings* then *Expert Settings*. Select *Connect via Tor* and depending on your situation you might also want to select *Don't save encrypted messages*.

From the menu select *Manage accounts* and add a new account.

#+BEGIN_SRC bash
Jabber ID: myusername@mydomain
Password:  your XMPP password
Hostname:  mydomain
Port:      5222
#+END_SRC

Then select *Next*. When chatting you can use the lock icon to encrypt your conversation. It's also going through Tor, so passive surveillance of the metadata should not be easy for an adversary.
** Tox
Tox is an encrypted peer-to-peer messaging system and so should work without Freedombone. It uses a system of nodes which act as a sort of directory service allowing users to find and connect to each other. The Tox node ID on the Freedombone can be found within the README within your home directory. If you have other users connect to your node then you will be able to continue chatting even when no other nodes are available.
*** Using the Toxic client
Log into your system with:

#+BEGIN_SRC bash
ssh myusername@mydomain -p 2222
#+END_SRC

Then from the menu select *Tox Chat*. Tox is encrypted by default and also routed through Tor, so it should be reasonably secure both in terms of message content and metadata.

[[file:images/toxic.jpg]]

** VoIP (Voice and text chat)
*** Text chat
In addition to voice it is also possible to do text chat via mumble. The security of this is pretty good provided that you do it via Plumble and Orbot on mobile, but compared to other options such as XMPP/Conversations or Tox the security is not as good, since the mumble server currently doesn't support forward secrecy.
*** Using with Ubuntu
Within the software center search for "mumble" and install the client then run it. Skip through the audio setup wizard.

Click on "add new" to add a new server and enter the default domain name for the Freedombone, your username (which can be anything) and the VoIP server password which can be found in the README file on the Freedombone. Accept the self-signed SSL certificate. You are now ready to chat.
*** Using with Android
Install [[https://f-droid.org/][F-Droid]]

If you don't have Orbot installed then enable The Guardian Project repository from the drop down menu and install it.

Search for and install Plumble.

Press the plus button to add a Mumble server.

Enter a label (which can be any name you choose for the server), the default domain name of the Freedombone, your username (which can also be anything) and the VoIP server password which can be found in the README file on the Freedombone.

Open the settings. Select General, then Connect via Tor. This will provide better protection, making it more difficult for adversaries to know who is talking to who.

Selecting the server by pressing on it then connects you to the server so that you can chat with other connected users.

/Note: if you don't know the default domain name and you did a full installation then it will be the same as the wiki domain name./
** SIP phones
Freedombone also supports SIP phones The username and domain is the same as for your email address, and the SIP password and extension number will appear within the README file in your home directory. Various SIP client options are available, such as CSipSimple on Android and Jitsi on desktop or laptop machines. Ideally use clients which support ZRTP, which will provide the best level of security.
*** About ZRTP
[[https://jitsi.org/Documentation/ZrtpFAQ][ZRTP]] appears to be the current best standard to end-to-end encrypted voice calls, combining good security with simplicity of use. When the initial cryptographic negotiation between phones is done at the start of a call a short authentication string (SAS) is calculated and displayed at both ends. To check that there isn't anyone intercepting the call and acting as a /man in the middle/ - as [[https://en.wikipedia.org/wiki/Stingray_phone_tracker][stingray type devices]] try to do - the short authentication string can be read out and verbally confirmed between the callers. If it's the same then you can be pretty confident that the call is secure.
*** Using with CSIPSimple
Add an account. Under *General Wizards* choose *Expert* and enter the following details:

| Account name     | Your username           |
| Account ID       | sip:username@yourdomain |
| Registration URI | sip:yourdefaultdomain   |
| Realm            | *                       |
| Username         | Your username           |
| Data (Password)  | Your SIP password       |
| ZRTP Mode        | Create ZRTP             |

If everything is working the account should appear in green with a status of *Registered*.
*** Using with Ring
From the menu select *Manage accounts*.

Add an account with the following details:

| Alias    | Your full name or nickname |
| Protocol | SIP                        |
| Hostname | yourdefaultdomain          |
| Username | Your username              |
| Password | Your SIP password          |

Select the *Security* tab. Under *SRTP Key Exchange* select *ZRTP*. Unde *SRTP Preferences* select *Not supported warning* and *Display SAS Once*.

* RSS Reader
The way that RSS reading is set up on Freedombone gives you strong reading privacy. Not only is there onion routing between you and the server but also between the server and the source of the RSS feed. The only down side is that many RSS feeds are still http only, and so could be vulnerable to injection attacks, but it's expected that more of this will go to https in the foreseeable future due to a combination of growing recognition of security issues and systems like Let's Encrypt which make obtaining certificates much easier.

[[file:images/rss_reader_mobile.jpg]]

See the control panel for the RSS reader onion address.

#+BEGIN_SRC bash
ssh username@domainname -p 2222
#+END_SRC

Select /Administrator controls/ then select the *About* screen.

The RSS reader is accessible only via an onion address. This provides a reasonable degree of reading privacy, making it difficult for passive adversaries such as governments, corporations or criminals to create lists of sites which you are subscribed to.

To set up the system open http://rss_reader_onion_address/ and log in with username *admin* and the password obtained either at the beginning of the install or from the README file in your home directory. You can then select the *Actions* menu and begin adding your feeds.

To access the RSS reader from a mobile device you can install a Tor compatible browser such as Orbot+OrWeb. It will try to automatically change to the mobile version of the user interface. Remember to add the site to the NoScript whitelist, and you may also need to turn HTTPS Everywhere off.

#+BEGIN_QUOTE
A note for the paranoid is that on mobile devices you get redirected to a different onion address which is specially set up for the mobile interface, so don't be alarmed that it looks like your connection is being hijacked.
#+END_QUOTE
* Git Projects
Github is ok, but it's proprietary and funded by venture capital. If you been around on the internet for long enough then you know how this story eventually works itself out - i.e. badly for the users. It's really only a question of time. If you're a software developer or do things which involve the Git version control system then it's a good idea to become accustomed to hosting your own repositories, before the inevitable Github shitstorm happens.

A Git hosting system called [[https://gogs.io][Gogs]] can optionally be installed. This is very similar to Github in appearance and use. It's lightweight and so well suited for use on low power ARM servers.

Navigate to your git site and click the *Register* button. The first user registered on the system becomes the administrator. Once you've done that then it's a good idea to disable further registrations. Currently that's a little complicated, but you can do it as follows:

#+begin_src bash :tangle no
sudo username@domainname -p 2222
#+end_src

Select *Exit to the comand line*.

#+begin_src bash :tangle no
sudo su
export GO_VERSION=1.5
sed -i "s|DISABLE_REGISTRATION =.*|DISABLE_REGISTRATION = true|g" /home/git/gvm/pkgsets/go${GO_VERSION}/global/src/github.com/gogits/gogs/custom/conf/app.ini
systemctl restart gogs
exit; exit
#+end_src

This will stop any spam accounts being created by random strangers or bots. You might want to mirror existing repos, and at any time a mirror can be converted into the main repo.
* Adding or removing users
Log into the system with:

#+BEGIN_SRC bash
ssh username@domainname -p 2222
#+END_SRC

Select *Administrator controls* then *User Management*. Depending upon the type of installation after selecting administrator controls you might need to enter:

#+BEGIN_SRC bash
sudo su
control
#+END_SRC

[[file:images/controlpanel/control_panel_manage_users.jpg]]

#+BEGIN_EXPORT html
<center>
Return to the <a href="index.html">home page</a>
</center>
#+END_EXPORT
