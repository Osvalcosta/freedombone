#!/bin/bash
#
# .---.                  .              .
# |                      |              |
# |--- .--. .-.  .-.  .-.|  .-. .--.--. |.-.  .-. .--.  .-.
# |    |   (.-' (.-' (   | (   )|  |  | |   )(   )|  | (.-'
# '    '     --'  --'  -' -  -' '  '   -' -'   -' '   -  --'
#
#                    Freedom in the Cloud
#
# Backup to local storage - typically a USB drive

# License
# =======
#
# Copyright (C) 2015-2016 Bob Mottram <bob@robotics.uk.to>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

PROJECT_NAME='freedombone'
COMPLETION_FILE=$HOME/${PROJECT_NAME}-completed.txt
BACKUP_EXTRA_DIRECTORIES=/root/backup-extra-dirs.csv
ENABLE_VERIFICATION="no"

export TEXTDOMAIN=${PROJECT_NAME}-backup-local
export TEXTDOMAINDIR="/usr/share/locale"

USB_DRIVE=/dev/sdb1
USB_MOUNT=/mnt/usb

# get default USB from config file
CONFIG_FILE=$HOME/${PROJECT_NAME}.cfg
if [ -f $CONFIG_FILE ]; then
    if grep -q "USB_DRIVE=" $CONFIG_FILE; then
        USB_DRIVE=$(cat $CONFIG_FILE | grep "USB_DRIVE=" | awk -F '=' '{print $2}')
    fi
fi

ADMIN_USERNAME=
ADMIN_NAME=

# The name of a currently suspended site
# Sites are suspended so that verification should work
SUSPENDED_SITE=

DATABASE_PASSWORD=''
if [ -f /root/dbpass ]; then
    DATABASE_PASSWORD=$(cat /root/dbpass)
fi

function suspend_site {
    # suspends a given website
    if [[ $ENABLE_VERIFICATION != "yes" ]]; then
        return
    fi
    SUSPENDED_SITE="$1"
    nginx_dissite $SUSPENDED_SITE
    service nginx reload
}

function restart_site {
    # restarts a given website
    if [ ! $SUSPENDED_SITE ]; then
        return
    fi
    nginx_ensite $SUSPENDED_SITE
    service nginx reload
    SUSPENDED_SITE=
}

function update_domains {
    RSS_READER_DOMAIN_NAME='ttrss'
    if grep -q "RSS reader domain" $COMPLETION_FILE; then
        RSS_READER_DOMAIN_NAME=$(cat $COMPLETION_FILE | grep "Gogs domain" | awk -F ':' '{print $2}')
    fi
    GIT_DOMAIN_NAME='gogs'
    if grep -q "Gogs domain" $COMPLETION_FILE; then
        GIT_DOMAIN_NAME=$(cat $COMPLETION_FILE | grep "Gogs domain" | awk -F ':' '{print $2}')
    fi
    MICROBLOG_DOMAIN_NAME='microblog'
    if grep -q "GNU Social domain" $COMPLETION_FILE; then
        MICROBLOG_DOMAIN_NAME=$(cat $COMPLETION_FILE | grep "GNU Social domain" | awk -F ':' '{print $2}')
    fi
    HUBZILLA_DOMAIN_NAME='hubzilla'
    if grep -q "Hubzilla domain" $COMPLETION_FILE; then
        HUBZILLA_DOMAIN_NAME=$(cat $COMPLETION_FILE | grep "Hubzilla domain" | awk -F ':' '{print $2}')
    fi
    FULLBLOG_DOMAIN_NAME='blog'
    if grep -q "Blog domain" $COMPLETION_FILE; then
        FULLBLOG_DOMAIN_NAME=$(cat $COMPLETION_FILE | grep "Blog domain" | awk -F ':' '{print $2}')
    fi
    MEDIAGOBLIN_DOMAIN_NAME='mediagoblin'
    if grep -q "Mediagoblin domain" $COMPLETION_FILE; then
        MEDIAGOBLIN_DOMAIN_NAME=$(cat $COMPLETION_FILE | grep "Mediagoblin domain" | awk -F ':' '{print $2}')
    fi
}

function mount_drive {
    if [ $1 ]; then
        USB_DRIVE=/dev/${1}1
    fi

    # get the admin user
    ADMIN_USERNAME=$(cat $COMPLETION_FILE | grep "Admin user" | awk -F ':' '{print $2}')
    if [ $2 ]; then
        ADMIN_USERNAME=$2
    fi
    ADMIN_NAME=$(getent passwd $ADMIN_USERNAME | cut -d: -f5 | cut -d, -f1)

    # check that the backup destination is available
    if [ ! -b $USB_DRIVE ]; then
        echo $"Please attach a USB drive"
        exit 1
    fi

    # unmount if already mounted
    umount -f $USB_MOUNT
    if [ ! -d $USB_MOUNT ]; then
        mkdir $USB_MOUNT
    fi
    if [ -f /dev/mapper/encrypted_usb ]; then
        rm -rf /dev/mapper/encrypted_usb
    fi
    cryptsetup luksClose encrypted_usb

    # mount the encrypted backup drive
    cryptsetup luksOpen $USB_DRIVE encrypted_usb
    if [ "$?" = "0" ]; then
        USB_DRIVE=/dev/mapper/encrypted_usb
    fi
    mount $USB_DRIVE $USB_MOUNT
    if [ ! "$?" = "0" ]; then
        echo $"There was a problem mounting the USB drive to $USB_MOUNT"
        rm -rf $USB_MOUNT
        exit 2
    fi
}

function unmount_drive {
    sync
    umount $USB_MOUNT
    if [ ! "$?" = "0" ]; then
        echo $"Unable to unmount the drive. This means that the backup did not work"
        rm -rf $USB_MOUNT
        exit 9
    fi
    rm -rf $USB_MOUNT
    if [[ $USB_DRIVE == /dev/mapper/encrypted_usb ]]; then
        echo $"Unmount encrypted USB"
        cryptsetup luksClose encrypted_usb
    fi
    if [ -f /dev/mapper/encrypted_usb ]; then
        rm -rf /dev/mapper/encrypted_usb
    fi
    echo $"Backup to USB drive is complete. You can now unplug it."
}

function backup_database {
    if [ ${#DATABASE_PASSWORD} -lt 2 ]; then
        echo $"No MariaDB password was given"
        restart_site
        exit 10
    fi
    if [ ! -d $USB_MOUNT/backup/${1} ]; then
        mkdir -p $USB_MOUNT/backup/${1}
    fi
    if [ ! -d $USB_MOUNT/backup/${1}data ]; then
        mkdir -p $USB_MOUNT/backup/${1}data
    fi
    if [ ! -d /root/temp${1}data ]; then
        mkdir -p /root/temp${1}data
    fi
    echo $"Obtaining ${1} database backup"
    mysqldump --lock-tables --password="$DATABASE_PASSWORD" ${1} > /root/temp${1}data/${1}.sql
    if [ ! -s /root/temp${1}data/${1}.sql ]; then
        echo $"${1} database could not be saved"
        shred -zu /root/temp${1}data/*
        rm -rf /root/temp${1}data
        umount $USB_MOUNT
        rm -rf $USB_MOUNT
        restart_site
        exit 5
    fi
}

function backup_directory_to_usb {
    if [ ! -d ${1} ]; then
        echo $"WARNING: directory does not exist: ${1}"
    else
        BACKUP_KEY_EXISTS=$(gpg --list-keys "$ADMIN_NAME (backup key)")
        if [ ! "$?" = "0" ]; then
            echo $"Backup key could not be found"
            restart_site
            exit 6
        fi
        MY_BACKUP_KEY_ID=$(gpg --list-keys "$ADMIN_NAME (backup key)" | grep 'pub ' | awk -F ' ' '{print $2}' | awk -F '/' '{print $2}')
        if [ ! -d $USB_MOUNT/backup/${2} ]; then
            mkdir -p $USB_MOUNT/backup/${2}
        fi
        obnam force-lock -r $USB_MOUNT/backup/${2} --encrypt-with $MY_BACKUP_KEY_ID ${1}
        obnam backup -r $USB_MOUNT/backup/${2} --encrypt-with $MY_BACKUP_KEY_ID ${1}
        if [[ $ENABLE_VERIFICATION == "yes" ]]; then
            obnam verify -r $USB_MOUNT/backup/${2} --encrypt-with $MY_BACKUP_KEY_ID ${1}
            if [ ! "$?" = "0" ]; then
                umount $USB_MOUNT
                rm -rf $USB_MOUNT
                if [[ ${1} == "/root/temp"* || ${1} == *"tempbackup" ]]; then
                    shred -zu ${1}/*
                    rm -rf ${1}
                fi
                restart_site
                exit 71
            fi
        fi
        obnam forget --keep=30d -r $USB_MOUNT/backup/${2} --encrypt-with $MY_BACKUP_KEY_ID
        if [ ! "$?" = "0" ]; then
            umount $USB_MOUNT
            rm -rf $USB_MOUNT
            if [[ ${1} == "/root/temp"* || ${1} == *"tempbackup" ]]; then
                shred -zu ${1}/*
                rm -rf ${1}
            fi
            restart_site
            exit 7
        fi
        if [[ ${1} == "/root/temp"* || ${1} == *"tempbackup" ]]; then
            shred -zu ${1}/*
            rm -rf ${1}
        fi
    fi
}

function make_backup_directory {
    # make a backup directory on the drive
    if [ ! -d $USB_MOUNT/backup ]; then
        mkdir $USB_MOUNT/backup
    fi
    if [ ! -d $USB_MOUNT/backup ]; then
        echo $"There was a problem making the directory $USB_MOUNT/backup."
        umount $USB_MOUNT
        rm -rf $USB_MOUNT
        exit 3
    fi
}

function check_storage_space_remaining {
    # Check space remaining on the usb drive
    used_percent=$(df -k $USB_MOUNT | tail -n 1 | awk -F ' ' '{print $5}' | awk -F '%' '{print $1}')
    if [ $used_percent -gt 95 ]; then
        echo $"Less than 5% of space remaining on backup drive"
        umount $USB_MOUNT
        rm -rf $USB_MOUNT
        exit 4
    fi
}

function backup_users {
    # Backup user files
    for d in /home/*/ ; do
        USERNAME=$(echo "$d" | awk -F '/' '{print $3}')
        if [[ $USERNAME != "git" && $USERNAME != "mirrors" && $USERNAME != "sync" ]]; then

            # Backup any gpg keys
            if [ -d /home/$USERNAME/.gnupg ]; then
                echo $"Backing up gpg keys for $USERNAME"
                backup_directory_to_usb /home/$USERNAME/.gnupg gnupg/$USERNAME
            fi

            # Backup any personal settings
            if [ -d /home/$USERNAME/personal ]; then
                echo $"Backing up personal settings for $USERNAME"
                backup_directory_to_usb /home/$USERNAME/personal personal/$USERNAME
            fi

            # Backup ssh keys
            if [ -d /home/$USERNAME/.ssh ]; then
                echo $"Backing up ssh keys for $USERNAME"
                backup_directory_to_usb /home/$USERNAME/.ssh ssh/$USERNAME
            fi

            # Backup fin database if it exists
            if [ -d /home/$USERNAME/.fin ]; then
                echo $"Backing up fin files for $USERNAME"
                backup_directory_to_usb /home/$USERNAME/.fin fin/$USERNAME
            fi

            # Backup syncthing
            if [ -d /home/$USERNAME/Sync ]; then
                echo $"Backing up syncthing files for $USERNAME"
                backup_directory_to_usb /home/$USERNAME/Sync syncthing/$USERNAME
				# ensure that device IDs will be backed up as part of user config settings
				if [ ! -d /home/$USERNAME/.config/syncthing ]; then
					mkdir -p /home/$USERNAME/.config/syncthing
					chown -R $USERNAME:$USERNAME /home/$USERNAME/.config
				fi					
				if [ -f /home/$USERNAME/.syncthing-server-id ]; then
					cp /home/$USERNAME/.syncthing-server-id /home/$USERNAME/.config/syncthing
					chown -R $USERNAME:$USERNAME /home/$USERNAME/.config
				fi				
				if [ -f /home/$USERNAME/.syncthingids ]; then
					cp /home/$USERNAME/.syncthingids /home/$USERNAME/.config/syncthing
					chown -R $USERNAME:$USERNAME /home/$USERNAME/.config
				fi				
			fi
			
			# Backup user configs
			if [ -d /home/$USERNAME/.config ]; then
				echo $"Backing up config files for $USERNAME"
				backup_directory_to_usb /home/$USERNAME/.config config/$USERNAME
			fi
			
			# Backup user local
			if [ -d /home/$USERNAME/.local ]; then
				echo $"Backing up local files for $USERNAME"
				backup_directory_to_usb /home/$USERNAME/.local local/$USERNAME
			fi

			# Backup mutt
			if [ -f /home/$USERNAME/.muttrc ]; then
				echo $"Backing up Mutt settings for $USERNAME"
				if [ ! -d /home/$USERNAME/tempbackup ]; then
					mkdir -p /home/$USERNAME/tempbackup
				fi
				cp /home/$USERNAME/.muttrc /home/$USERNAME/tempbackup
				if [ -f /etc/Muttrc ]; then
					cp /etc/Muttrc /home/$USERNAME/tempbackup
				fi
				backup_directory_to_usb /home/$USERNAME/tempbackup mutt/$USERNAME
			fi

			# Backup email
			if [ -d /home/$USERNAME/Maildir ]; then
				echo $"Creating an email archive for $USERNAME"
				if [ ! -d /root/tempbackupemail/$USERNAME ]; then
					mkdir -p /root/tempbackupemail/$USERNAME
				fi
				tar -czvf /root/tempbackupemail/$USERNAME/maildir.tar.gz /home/$USERNAME/Maildir
				echo $"Backing up emails for $USERNAME"
				backup_directory_to_usb /root/tempbackupemail/$USERNAME mail/$USERNAME
			fi

			# Backup spamassassin
			if [ -d /home/$USERNAME/.spamassassin ]; then
				echo $"Backing up spamassassin settings for $USERNAME"
				backup_directory_to_usb /home/$USERNAME/.spamassassin spamassassin/$USERNAME
			fi

			# Backup procmail
			if [ -f /home/$USERNAME/.procmailrc ]; then
				echo $"Backing up procmail settings for $USERNAME"
				if [ ! -d /home/$USERNAME/tempbackup ]; then
					mkdir -p /home/$USERNAME/tempbackup
				fi
				cp /home/$USERNAME/.procmailrc /home/$USERNAME/tempbackup
				backup_directory_to_usb /home/$USERNAME/tempbackup procmail/$USERNAME
			fi
		fi
	done
}

function backup_directories {
	# directories to be backed up (source,dest)
	backup_dirs=(
		"none,                               none,       /etc/letsencrypt,                                letsencrypt"
		"none,                               none,       /var/lib/dokuwiki,                               wiki"
		"none,                               none,       /etc/dokuwiki,                                   wiki2"
		"none,                               none,       /etc/ssl,                                        ssl"
		"/etc/share/tt-rss,                  ttrss,      /root/tempttrssdata,                             ttrss"
		"none,                               none,       /var/spool/mlmmj,                                mailinglist"
		"none,                               none,       /var/lib/prosody,                                xmpp"
		"none,                               none,       /etc/nginx/sites-available,                      web"
		"none,                               none,       /home/$ADMIN_USERNAME/.ipfs,                     ipfs"
		"none,                               none,       /var/cache/minidlna,                             dlna"
		"/home/git/go/src/github.com/gogits, gogs,       /root/tempgogsdata,                              gogsdata"
		"none,                               none,       /home/git/go/src/github.com/gogits/gogs/custom,  gogs"
		"none,                               none,       /home/git/gogs-repositories,                     gogsrepos"
		"none,                               none,       /home/git/.ssh,                                  gogsssh"
		"none,                               none,       /var/lib/tox-bootstrapd,                         tox"
		"/var/www/${MICROBLOG_DOMAIN_NAME},  gnusocial,  /root/tempgnusocialdata,                         gnusocialdata"
		"none,                               none,       /var/www/${MICROBLOG_DOMAIN_NAME}/htdocs,        gnusocial"
		"none,                               none,       /var/lib/syncthing/SyncShared,                   syncthingshared"
		"none,                               none,       /root/.config/syncthing,                         syncthingconfig"
		"/var/www/${HUBZILLA_DOMAIN_NAME},   hubzilla,   /root/temphubzilladata,                          hubzilladata"
		"none,                               none,       /var/www/${HUBZILLA_DOMAIN_NAME}/htdocs,         hubzilla"
		"none,                               none,       /var/www/${FULLBLOG_DOMAIN_NAME}/htdocs,         blog"
		"none,                               none,       /var/lib/tor,                                    tor"
		"none,                               none,       /var/www/${MEDIAGOBLIN_DOMAIN_NAME}/htdocs,      mediagoblin"
	)

	for dr in "${backup_dirs[@]}"
	do
		# if this directory exists then backup the given database
		required_directory=$(echo $dr | awk -F ',' '{print $1}'  | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
		database_name=$(echo $dr | awk -F ',' '{print $2}'  | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

		if [[ "$database_name" == *"hubzilla"* ]]; then
			suspend_site ${HUBZILLA_DOMAIN_NAME}
		fi
		if [[ "$database_name" == *"gnusocial"* ]]; then
			suspend_site ${MICROBLOG_DOMAIN_NAME}
		fi
		if [[ "$database_name" == *"gogs"* ]]; then
			suspend_site ${GIT_DOMAIN_NAME}
		fi
		if [[ "$database_name" == *"ttrss"* ]]; then
			suspend_site ${RSS_READER_DOMAIN_NAME}
		fi

		if [[ $required_directory != "none" ]]; then
			if [ -d $required_directory ]; then
				if [[ $database_name != "none" ]]; then
					backup_database $database_name
				fi
			fi
		fi

		# if this directory exists then back it up to the given destination
		source_directory=$(echo $dr | awk -F ',' '{print $3}'  | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
		if [ -d $source_directory ]; then
			dest_directory=$(echo $dr | awk -F ',' '{print $4}'  | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
			echo $"Backing up $source_directory to $dest_directory"
			backup_directory_to_usb $source_directory $dest_directory
		fi

		restart_site
	done
}

function remove_backup_directory {
	if [ $1 ]; then
		if [[ $1 == "remove" ]]; then
			if [ -d $USB_MOUNT/backup ]; then
				rm -rf $USB_MOUNT/backup
				echo $'Existing backup directory removed'
				unmount_drive
				exit 0
			fi
		fi
	fi
}

function prepare_directories {
	# Some miscellaneous preparation for backing up directories
	if [ -d /home/git/go/src/github.com/gogits ]; then
		mv /home/git/gogs-repositories/*.git /home/git/gogs-repositories/$ADMIN_USERNAME
	fi
	if [ -d /var/lib/tox-bootstrapd ]; then
		cp /etc/tox-bootstrapd.conf /var/lib/tox-bootstrapd
		if [ -d /var/lib/tox-bootstrapd/Maildir ]; then
			rm -rf /var/lib/tox-bootstrapd/Maildir
		fi
	fi
}

function backup_configuration {
	echo $"Backing up ${PROJECT_NAME} configuration files"
	if [ ! -d /root/tempbackupconfig ]; then
		mkdir -p /root/tempbackupconfig
	fi
	cp -f $CONFIG_FILE /root/tempbackupconfig
	cp -f $COMPLETION_FILE /root/tempbackupconfig
	if [ -f $BACKUP_EXTRA_DIRECTORIES ]; then
		cp -f $BACKUP_EXTRA_DIRECTORIES /root/tempbackupconfig
	fi
	# nginx password hashes
	if [ -f /etc/nginx/.htpasswd ]; then
		cp -f /etc/nginx/.htpasswd /root/tempbackupconfig/htpasswd
	fi
	backup_directory_to_usb /root/tempbackupconfig config
}

function backup_admin_readme {
	if [ -f /home/$ADMIN_USERNAME/README ]; then
		echo $"Backing up README"
		if [ ! -d /home/$ADMIN_USERNAME/tempbackup ]; then
			mkdir -p /home/$ADMIN_USERNAME/tempbackup
		fi
		cp -f /home/$ADMIN_USERNAME/README /home/$ADMIN_USERNAME/tempbackup
		backup_directory_to_usb /home/$ADMIN_USERNAME/tempbackup readme
	fi
}

function backup_voip {
	if [ -f /etc/mumble-server.ini ]; then
		echo $"Backing up VoIP settings"
		if [ ! -d /root/tempvoipbackup ]; then
			mkdir -p /root/tempvoipbackup
		fi
		cp -f /etc/mumble-server.ini /root/tempvoipbackup
		cp -f /var/lib/mumble-server/mumble-server.sqlite /root/tempvoipbackup
		cp -f /etc/sipwitch.conf /root/tempvoipbackup
		backup_directory_to_usb /root/tempvoipbackup voip
	fi
}

function backup_mariadb {
	if [ ${#DATABASE_PASSWORD} -gt 1 ]; then
		if [ ! -d /root/tempmariadb ]; then
			mkdir /root/tempmariadb
		fi
		mysqldump --lock-tables --password="$DATABASE_PASSWORD" mysql user > /root/tempmariadb/mysql.sql
		if [ ! -s /root/tempmariadb/mysql.sql ]; then
			echo $"Unable to backup mysql settings"
			rm -rf /root/tempmariadb
			umount $USB_MOUNT
			rm -rf $USB_MOUNT
			exit 8
		fi
		echo "$DATABASE_PASSWORD" > /root/tempmariadb/db
		chmod 400 /root/tempmariadb/db
		backup_directory_to_usb /root/tempmariadb mariadb
	fi
}

function valid_backup_destination {
	destination_dir="$1"
	is_valid="yes"

	if [[ "$destination_dir" == "hubzilla" || \
				"$destination_dir" == "hubzilladata" || \
				"$destination_dir" == "gogs" || \
				"$destination_dir" == "gogsrepos" || \
				"$destination_dir" == "gogsssh" || \
				"$destination_dir" == "gnusocial" || \
				"$destination_dir" == "gnusocialdata" || \
				"$destination_dir" == "mariadb" || \
				"$destination_dir" == "config" || \
				"$destination_dir" == "letsencrypt" || \
				"$destination_dir" == "wiki" || \
				"$destination_dir" == "wiki2" || \
				"$destination_dir" == "xmpp" || \
				"$destination_dir" == "ipfs" || \
				"$destination_dir" == "dlna" || \
				"$destination_dir" == "tox" || \
				"$destination_dir" == "ssl" || \
				"$destination_dir" == "ttrss" || \
				"$destination_dir" == "blog" || \
				"$destination_dir" == "syncthingconfig" || \
				"$destination_dir" == "syncthingshared" || \
				"$destination_dir" == "syncthing" || \
				"$destination_dir" == "mediagoblin" || \
				"$destination_dir" == "mailinglist" ]]; then
		is_valid="no"
	fi

	echo $is_valid
}

function backup_extra_directories {
	if [ ! -f $BACKUP_EXTRA_DIRECTORIES ]; then
		return
	fi

	echo $"Backing up some additional directories"
	while read backup_line
	do
		backup_dir=$(echo "$backup_line" | awk -F ',' '{print $1}' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
		if [ -d "$backup_dir" ]; then
			destination_dir=$(echo "$backup_line" | awk -F ',' '{print $2}' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
			if [[ $(valid_backup_destination "$destination_dir") == "yes" ]]; then
				backup_directory_to_usb "$backup_dir" "$destination_dir"
			else
				echo $"WARNING: The backup directory $destination_dir is already used."
				echo $"Choose a different destination name for backing up $backup_dir"
			fi
		else
			echo $"WARNING: Directory $backup_dir does not exist"
		fi
	done <$BACKUP_EXTRA_DIRECTORIES
}

# has the remove option been set ?
remove_option=$2
if [[ $1 == "remove" ]]; then
	remove_option=$1
fi

mount_drive $1 $2
remove_backup_directory $remove_option
make_backup_directory
check_storage_space_remaining
update_domains
backup_users
prepare_directories
backup_directories
backup_configuration
backup_admin_readme
backup_voip
backup_mariadb
backup_extra_directories
unmount_drive

exit 0
